# -*- coding: utf-8 -*-
"""
Created on Tue Sep 13 10:59:52 2016

@author: mpnun
"""

import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mat
from ase.neighborlist import NeighborList

class KMC_lattice:
    
    def __init__(self):
        
        self.workingdir = ''
        self.lattice_matrix = np.zeros((3,3))         # each row is a lattice vector
        self.site_type_names = ''
        self.site_type_inds = ''
        self.frac_coords = ''
        self.neighbor_list = ''
        self.cell_list = ''
        self.mol_dat = ''                           # ASE-compatible object for the atomic positions

    def PlotLattice(self):
        print 'Picture of the lattice'
        
    def Read_lattice_input(self):
        print 'Reading lattice_input.dat'
    
    def Write_lattice_input(self):
        with open(self.workingdir + '/lattice_input.dat', 'w') as txt:
            txt.write('# Lattice specification file: generated by ZacrosWrapper' + '\n\n')
            txt.write('lattice periodic_cell\n\n');
            txt.write('cell_vectors       # in row format (Angstroms)\n')
            txt.write('\t' + str(self.lattice_matrix[0,0]) + '\t' + str(self.lattice_matrix[0,1]) + '\n')
            txt.write('\t' + str(self.lattice_matrix[1,0]) + '\t' + str(self.lattice_matrix[1,1]) + '\n\n')

            txt.write('repeat_cell\t 1 1 \n\n')

            txt.write('n_cell_sites\t \n')
            txt.write('n_site_types\t \n')
            
            txt.write('site_type_names \t')
            
            txt.write('\n\n');
            txt.write('site_types\t');
            
            txt.write('\n\n');
            
            # Site coordinates
            txt.write('site_coordinates   # fractional coordinates (x,y) in row format\n')
            txt.write('\n');
            
            # Site neighboring structure
            txt.write('neighboring_structure # site-neighsite cell\n\n');
            txt.write('\n' 'end_neighboring_structure\n\n');
            
            txt.write('end_lattice\n')
        txt.close()
    
    def Read_lattice_output(self):
        print 'Reading lattice_output.dat'    
    
    def molecular_to_KMClat(self):
        
        self.lattice_matrix = self.mol_dat.cell[0:2,0:2]     # Need to exclude z componenets      
        
        # Build neighbors
        nn_dist = 1.6
        neighb_list = NeighborList(cutoffs = nn_dist / 2 * np.ones(len(self.mol_dat.numbers)), self_interaction=False)
        neighb_list.build(self.mol_dat)
#        print neighb_list.neighbors