# -*- coding: utf-8 -*-
"""
Created on Tue Sep 13 10:59:52 2016

@author: mpnun
"""

import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mat
from ase.neighborlist import NeighborList

class KMC_lattice:
    
    def __init__(self):
        
        self.workingdir = ''
        self.lattice_matrix = np.zeros((2,2))         # each row is a lattice vector
        self.site_type_names = ''
        self.site_type_inds = ''
        self.frac_coords = ''
        self.neighbor_list = ''
        self.cell_list = ''
        self.mol_dat = ''                           # ASE-compatible object for the atomic positions

    def PlotLattice(self):
        mat.rcParams['mathtext.default'] = 'regular'
        mat.rcParams['text.latex.unicode'] = 'False'
        mat.rcParams['legend.numpoints'] = 1
        mat.rcParams['lines.linewidth'] = 2
        mat.rcParams['lines.markersize'] = 12
        
        plt.figure()
        
        plt.plot([1,2,3,4],[1,4,9,16])    
        
        plt.xticks(size=20)
        plt.yticks(size=20)
        plt.xlabel('x-coord (ang)',size=24)
        plt.ylabel('y-coord (ang)',size=24)
#        plt.legend(self.data.Species['surf_spec'],loc=4,prop={'size':20},frameon=False)        
        plt.show()
        # Plot periodic cell
        # Plot points for each of the lattice sites
        # Plot lines between nearest-neighbors        
        
    def Read_lattice_KMC(self):
        print 'Reading lattice_input.dat and lattice_output.txt'
    
    def Write_lattice_input(self):
        with open(self.workingdir + '/lattice_input.dat', 'w') as txt:
            txt.write('# Lattice specification file: generated by ZacrosWrapper' + '\n\n')
            txt.write('lattice periodic_cell\n\n');
            txt.write('cell_vectors       # in row format (Angstroms)\n')
            txt.write('\t {0:.3f} \t {0:.3f} \n'.format(self.lattice_matrix[0,0],str(self.lattice_matrix[0,1])))
            txt.write('\t {0:.3f} \t {0:.3f} \n\n'.format(self.lattice_matrix[1,0],str(self.lattice_matrix[1,1])))

            txt.write('repeat_cell\t 1 \t 1 \n\n')

            txt.write('n_cell_sites \t {} \n'.format(len(self.site_type_inds)))
            txt.write('n_site_types \t {} \n'.format(len(self.site_type_names)))
            
            txt.write('site_type_names \t')
            for site_type in self.site_type_names:
                txt.write(site_type + '\t')
            txt.write('\n')
            
            txt.write('site_types \t')
            for site_type_ind in self.site_type_inds:
                txt.write('{}  '.format(site_type_ind))
            txt.write('\n\n')
            
            # Site coordinates
            txt.write('site_coordinates \t # fractional coordinates (x,y) in row format\n')
            for i in range(0, len(self.site_type_inds)):
                txt.write('\t {0:.3f} \t {0:.3f} \n'.format(self.frac_coords[i,0],str(self.frac_coords[i,1])))
            txt.write('\n')
            
            # Site neighboring structure
            txt.write('neighboring_structure \t # site-neighsite cell\n');
            for pair in self.neighbor_list:
                txt.write('\t {}-{} self \n'.format(pair[0],pair[1]))
            txt.write('end_neighboring_structure\n\n')
            
            txt.write('end_lattice\n')
        txt.close() 
    
    def molecular_to_KMClat(self):
        
        self.lattice_matrix = self.mol_dat.cell[0:2,0:2]     # Need to exclude z componenets      
        
        # Build neighbors
        nn_dist = 1.6
        neighb_list = NeighborList(cutoffs = nn_dist / 2 * np.ones(len(self.mol_dat.numbers)), self_interaction=False)
        neighb_list.build(self.mol_dat)
        self.neighbor_list = neighb_list.neighbors