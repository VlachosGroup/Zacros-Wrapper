# -*- coding: utf-8 -*-
"""
Created on Tue Sep 13 10:59:52 2016

@author: mpnun
"""

import numpy as np
import matplotlib as mat
mat.use('Agg')
import matplotlib.pyplot as plt
#from ase.neighborlist import NeighborList

class Lattice:
    
    def __init__(self):
        
        self.workingdir = ''
        self.lattice_matrix = np.zeros((2,2))         # each row is a lattice vector
        self.repeat = [1,1]
        self.site_type_names = ''
        self.site_type_inds = ''
        self.frac_coords = []
        self.cart_coords = []
        self.neighbor_list = ''
        self.cell_list = ''
        self.mol_dat = ''                           # ASE Atoms object for the atomic positions

    def PlotLattice(self, cutoff = 3.0, plot_neighbs = False, type_symbols = ['o','s','^','v']):
        
        cart_coords = np.dot(self.frac_coords, self.lattice_matrix)      
        border = np.dot(np.array([[0.0,0.0],[1.0,0.0],[1.0,1.0],[0.0,1.0],[0.0,0.0]]),self.lattice_matrix)             
        
        mat.rcParams['mathtext.default'] = 'regular'
        mat.rcParams['text.latex.unicode'] = 'False'
        mat.rcParams['legend.numpoints'] = 1
        mat.rcParams['lines.linewidth'] = 2
        mat.rcParams['lines.markersize'] = 12
        
        plt.figure()
        
        plt.plot(border[:,0], border[:,1], '--k', linewidth = 2)                  # cell border 

        if plot_neighbs:
            for pair in self.neighbor_list:                                             # neighbors
                p1 = np.array([cart_coords[pair[0]-1,0], cart_coords[pair[0]-1,1]])
                p2 = np.array([cart_coords[pair[1]-1,0], cart_coords[pair[1]-1,1]])
                if np.linalg.norm(p2 - p1) < cutoff:
                    plt.plot([p1[0], p2[0]], [p1[1], p2[1]], '-k', linewidth = 1)

        for site_type in range(1, np.max(np.array(self.site_type_inds))+1 ):

            is_of_type = []
            
            for site_ind in range(len(self.site_type_inds)):
                if self.site_type_inds[site_ind] == site_type:
                    is_of_type.append(site_ind)
            
            plt.plot(cart_coords[is_of_type,0], cart_coords[is_of_type,1], linestyle='None', marker = type_symbols[(site_type-1) % len(type_symbols)], color = [0.8, 0.8, 0.8], markersize = 4)          # sites  
        
        plt.xticks(size=20)
        plt.yticks(size=20)
        plt.xlabel('x-coord (ang)',size=24)
        plt.ylabel('y-coord (ang)',size=24)
        
        return plt
    
    def Read_lattice_output(self,fname):
        with open(fname,'r') as txt:
            RawTxt = txt.readlines()           
        n_sites = len(RawTxt) - 2
        self.cart_coords = np.zeros([n_sites,2])        
        
        # Fill in lattice vectors
        line1 = RawTxt[0].split()
        self.lattice_matrix[0,0] = float(line1[1])
        self.lattice_matrix[0,1] = float(line1[2])
        line2 = RawTxt[1].split()
        self.lattice_matrix[1,0] = float(line2[1])
        self.lattice_matrix[1,1] = float(line2[2])
        
        # Fill in site coordinates and neighbors
        self.neighbor_list = []
        self.site_type_inds = []
        for site_ind in range(n_sites):
            line = RawTxt[site_ind+2].split()
            self.cart_coords[site_ind,:] = [line[1], line[2]]
            self.site_type_inds.append(int(line[3]))
            neighbs = line[5::]
            for site_2 in neighbs:
                if int(site_2) > 0:         # Zeros are placeholders in the output file
                    self.neighbor_list.append([site_ind+1, int(site_2)])
        
        # Convert to fractional coordinates
        self.frac_coords = np.dot(self.cart_coords, np.linalg.inv(self.lattice_matrix))
    
    def Read_lattice_input(self):
        input_text = []
        with open(self.workingdir + '/lattice_input.dat','r') as Txt:
            RawTxt = Txt.readlines()   
        for i in RawTxt:
            input_text.append(i.split('\n')[0])
    
    def Write_lattice_input(self):
        with open(self.workingdir + '/lattice_input.dat', 'w') as txt:
            txt.write('# Lattice specification file: generated by ZacrosWrapper' + '\n\n')
            txt.write('lattice periodic_cell\n\n');
            txt.write('cell_vectors       # in row format (Angstroms)\n')
            txt.write('\t {0:.3f} \t {0:.3f} \n'.format(self.lattice_matrix[0,0],str(self.lattice_matrix[0,1])))
            txt.write('\t {0:.3f} \t {0:.3f} \n\n'.format(self.lattice_matrix[1,0],str(self.lattice_matrix[1,1])))

            txt.write('repeat_cell\t {} \t {} \n\n'.format(self.repeat[0],self.repeat[1]))

            txt.write('n_cell_sites \t {} \n'.format(len(self.site_type_inds)))
            txt.write('n_site_types \t {} \n'.format(len(self.site_type_names)))
            
            txt.write('site_type_names \t')
            for site_type in self.site_type_names:
                txt.write(site_type + '\t')
            txt.write('\n')
            
            txt.write('site_types \t')
            for site_type_ind in self.site_type_inds:
                txt.write('{}  '.format(site_type_ind))
            txt.write('\n\n')
            
            # Site coordinates
            txt.write('site_coordinates \t # fractional coordinates (x,y) in row format\n')
            for i in range(0, len(self.site_type_inds)):
                txt.write('\t {0:.3f} \t {0:.3f} \n'.format(self.frac_coords[i,0],str(self.frac_coords[i,1])))
            txt.write('\n')
            
            # Site neighboring structure
            txt.write('neighboring_structure \t # site-neighsite cell\n');
            for pair in self.neighbor_list:
                txt.write('\t {}-{} self \n'.format(pair[0],pair[1]))
            txt.write('end_neighboring_structure\n\n')
            
            txt.write('end_lattice\n')
        txt.close() 
    
#    def molecular_to_KMClat(self):
#        
#        self.lattice_matrix = self.mol_dat.cell[0:2,0:2]     # Need to exclude z componenets      
#        
#        # Build neighbors
#        nn_dist = 1.6
#        neighb_list = NeighborList(cutoffs = nn_dist / 2 * np.ones(len(self.mol_dat.numbers)), self_interaction=False)
#        neighb_list.build(self.mol_dat)
#        self.neighbor_list = neighb_list.neighbors